
#include <prelude.d>
#include <stdlib.d>
#include <stdio.d>
#include <np_aes.d>
#include "a_common\aaaa_lib.d"
#include "worms.h"				// ex INTRFACE

#include <math.d>

#define TSTARG 0


int WM1 = 20;
int WML = 50;

struct WORM
(
	[WML]int xc, yc;
	int tail, wastail;
	long float rich;
	int nr;
);

[WM1]struct WORM wormen;

int    nx,ny,gr180=180;
long float chg,d,
       pi=3.1415926536,hm:=640,vm:=400;

int r := 6;
int s := 4;
int hoek := 10;
int worm := 15;
int worms := 3;

int hl,i,j,inkey;
ref OBJECT db;
ref TEDINFO wl,wa,wg,wr,ws;

extern V_WORKOUT scr;
extern RECT scr_grect;

proc:long float rnd  { Random()/16777216F } 	/* Yields a value between 0 and 1 */

proc worm_setup			/* (void):void */
{
	for wormen to worms
	do
		wormen.xc[0] := rnd()*hm;
		wormen.yc[0] := rnd()*vm;
		wormen.rich := rnd()*2*pi;
		wormen.tail := 0
	od
}

proc clear_wormen
{
	for wormen
	do
		for wormen.xc
			do xc := 0 od;
		for wormen.yc
			do yc := 0 od
	od
}

proc(ref OBJECT db): void f_center
{
	RECT r;				/* almost never used */
	form_center(db, &r.x,&r.y,&r.w,&r.h)
}

global
proc(int argc; []ref char argv):int main
{
	static int eerste := 0;
	[]short xy := {0,0,639,399};
	int tweede=2,derde=tweede*eerste; 		/* test '=' */
	short obno;
	ref char dump;

	appl_init();

	if  rsrc_load("WORMS.RSC") eq 0
	then
		form_alert(1,"[1][Geen Resource!][ ACH ]");
		appl_exit();
		return 1
	fi;
#if TSTARG
	alert_text("argc %d", argc);
	for argv to argc
		after i := 0
	do
		if argv ne nil
		then alert_text(" %d arg %d | '%s' ", argc, i++, argv);
		fi
	od;
#endif

	hl := instt_scr();
	hm := scr.w;
	vm := scr.h;
	xy[2] := scr.w;
	xy[3] := scr.h;
	vs_clip(hl,true,xy);
	rsrc_gaddr(0, DB, &db);
	wl := db[WORML].spec.tedinfo;
	wa := db[WORMEN].spec.tedinfo;
	wg := db[WORMK].spec.tedinfo;
	wr := db[WORMR].spec.tedinfo;
	ws := db[WORMS].spec.tedinfo;
	f_center(db);

	while inkey ne 'q'
		after inkey  := 0
	do
		mpijl;
		keusaf(db[OK]);
		keusaf(db[QUIT]);
		keusaf(db[CONT]);
		dump := form_save(db,0,hl);
		obno := form_move(db,hl,dump,true,WORML,WMOVE,0,&scr_grect);
		form_rest(db,0,hl,dump);
		if obno eq QUIT then break fi;
		hidem;
		deffill(hl,1,1,0,0);
/*				   color
					 interior
					   style
					     perimeter	*/
		vswr_mode(hl,3);
		if      obno eq OK
			or (obno eq CONT and eerste eq 0)
		then
			eerste := tweede;
			worm := atoi(wl->text);
			if  worm > WML then worm := WML fi;
			worms := atoi(wa->text);
			if  worms > WM1 then worms := WM1 fi;
			hoek := atoi(wg->text);
			r := atoi(wr->text);
			s := atoi(ws->text);
			d := hoek*pi/gr180;			/*  radialen */
			v_clrwk(hl);

			clear_wormen();
#if 1
			worm_setup();
#else
			for wormen to worms
			do
				wormen.xc[0] := rnd()*hm;
				wormen.yc[0] := rnd()*vm;
				wormen.rich := rnd()*2*pi;
				wormen.tail := 0;
			od
#endif
		fi;

		do
			while inkey eq 0
				after inkey := 0
			do
				ref struct WORM wurm;
				wurm := wormen + (size_t)(rnd() * worms);
				wurm->wastail := wurm->tail;
				wurm->tail := (wurm->tail % worm)+1;
				xy[0] := xy[2] := wurm->xc[wurm->tail];
				xy[1] := xy[3] := wurm->yc[wurm->tail];
				if  not ( xy[0] eq 0 and xy[1] eq 0)
				then
					v_circle(hl,xy[0],xy[1],r);
					v_pline(hl,2,xy)
				fi;
				chg := rnd();
				wurm->rich += chg < 0.5 ? d : -d;
				nx := (wurm->xc[wurm->wastail]
						+(int)(s*cos(wurm->rich))
					  ) %scr.w;
				ny := (wurm->yc[wurm->wastail]
						+(int)(s*sin(wurm->rich))
					  ) %scr.h;

				if nx<0 then nx := nx+scr.w fi;
				if ny<0 then ny := ny+scr.h fi;

				wurm->xc[wurm->tail] := nx;
				wurm->yc[wurm->tail] := ny;
				v_circle(hl,nx,ny,r);

				inkey := Crawio(0xFF);
			od;
			inkey&=0xFF;
			if inkey eq ' ' then inkey := Bconin(2)&0xFF fi;
			if inkey ne 'c' then break fi
		od;
		showm;
	od;
	v_clsvwk(hl);
	form_dial(FMD_FINISH, 0,0,0,0, 0,0, scr.w, scr.h);
	appl_exit();
	0
}
