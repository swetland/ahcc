
; This project builds a full AHCC using Pure C and Pure C libraries

shell\ahcc.prg

.C [-Isinclude]

; configuration
.C [-DRSRC_H="shell/ahcc.h" -DRSRC_RSC="ahcc.rsc"]
.C [-DPRGNAME="AHCC"]
.C [-DCVERSION="6.0"]

.C [-DGEMSHELL=1]
.C [-DFU_TREE=1]

.C [-DBIP_CC=1 -DBIP_ASM=1 -DBIP_LD=1]
.C [-DC99=0]			; Preliminary C99 support.
.C [-DLL=0]				; implement long long (not finished yet :-)
; LL: for now never, future: linked to C99
.C [-DFOR_A=0]			; More like Algol
.C [-DFLOAT=1]			; floating point support
.C [-DCOLDFIRE=1]		; Coldfire v4e support
.C [-DROTOP=0]			; <> >< (rol,ror) ROTate OPerators, else __ROL__ and __ROR__
.C [-DBOFFS=1]			; built_in offsetof
.C [-DOFFS=1]			; Pure C style offsetof

; debugging
.C [-DLOST_NODES=0]		; display lost nodes
.C [-DOPTBUG=0 -DPCNT_SAMPLE=0]	; optimizer debugging
.C [-DC_DEBUG=0]		; comp/asm/ld debugging
.C [-DDEBUG=0]			; shell/editor/prj debugging: debug dialogue
.C [-DPRLN=0]			; #pragma prln (a option because it calls print_node)
.C [-DDBGFR=0]			; Debug freeing free nodes (ptrs & const's)
.C [-DDBGLN=0]			; Signal lost nodes

.C [-2 -8]
.C [-A- -H- -K-]
.C [-C -M -P]
.C [-W-par -W-stv -W-sig -W-cln]	; warning level must be 2 !!
.L [-S=32768]			; loads of recursion in compiler

=

pcvstart.o

aaaa.c					; main

text\text.c
text\cursor.c
text\editor.c		(text\fkeytxt.h)
text\buffer.c
text\text_cfg.c
text\text_sel.c

common\cursor.c
common\files.c
common\kit.c		(common\diff.h)
common\treeview.c	(common\treeview.h)
common\hierarch.c		; hierarchic name manipulation
common\options.c
common\windows.c
common\wdial.c			; window dialogue handling
common\journal.c
common\F_x.c	(common\F_x.h)
common\msgbuf.c
common\stm.c			; chain manager
common\config.c
common\qpfiprep.c
common\qpfind.s
common\parent.s
common\scr_inst.c
common\nkcc_c.c
common\aaaankcc.s		; for the real nkc_tconv
common\win_menu.c
common\aaaa_lib.c
common\dict.c
common\ipff.c
common\pdb.c
common\cmpl.s

shell\gemshell.c	(shell\shell.h)						; GEM shell
shell\shell.c		(shell\shell.h,ahcc\peepstat.h)		; shell's make
shell\shlcfg.c		(shell\shell.h)						; *
shell\tos_call.s		; passes parameters argc & argv to module
						; in stead of program
shell\bip_io.c

; compiler
ahcc\init_cc.c		(ahcc\param.h, ahcc\nodedefs.h)	; initialize variables
ahcc\ahcc.c			(ahcc\param.h, ahcc\nodedefs.h)	; compiler's main

; compiler's body
ahcc\cc_load.c		(ahcc\param.h, ahcc\nodedefs.h)
ahcc\c_lex.c		(ahcc\param.h, ahcc\nodedefs.h, ahcc\c_lex.h)
ahcc\tok.c			(ahcc\param.h, ahcc\nodedefs.h, ahcc\c_lex.h, ahcc\tok_do.h)
ahcc\cache.c		(ahcc\param.h, ahcc\nodedefs.h, ahcc\peepstat.h)
ahcc\pre.c			(ahcc\param.h, ahcc\nodedefs.h, ahcc\c_lex.h)
ahcc\body.c			(ahcc\param.h, ahcc\nodedefs.h) ; (ahcc\a_lproc.h,ahcc\a_clause.h,ahcc\a_stmts.h)
ahcc\decl.c			(ahcc\param.h, ahcc\nodedefs.h, ahcc\pmod.h)
ahcc\d2.c			(ahcc\param.h, ahcc\nodedefs.h, ahcc\a_init.h)
ahcc\expr.c			(ahcc\param.h, ahcc\nodedefs.h)
ahcc\e2.c			(ahcc\param.h, ahcc\nodedefs.h); (ahcc\a_expr.h)
ahcc\gen.c			(ahcc\param.h, ahcc\save_con.h)
ahcc\g2.c			(ahcc\param.h, ahcc\code.h)
ahcc\gsub.c			(ahcc\param.h, ahcc\nodedefs.h)
ahcc\md.c			(ahcc\param.h, ahcc\nodedefs.h); (ahcc\modify_t.h)
ahcc\nodes.c		(ahcc\param.h, ahcc\nodedefs.h)
ahcc\out.c			(ahcc\param.h, ahcc\nodedefs.h)
ahcc\d80tod64.s
; ahcc\ll.s			; if LL (long long) not yet

; optimizer
ahcc\opt.c			(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\inst.c			(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\branch.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\reg.c			(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\health.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h,ahcc\tony.h)
ahcc\peep0.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\peep1.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\peep2.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)
ahcc\peep3.c		(ahcc\optimize.h,ahcc\po_defs.h,ahcc\opt.h)

; assembler (Motorola)
ahcc\as.c			(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; Motorola assembler          GEN_PO=1 BIP_ASM=1
ahcc\as_parse.c		(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; parse Motorola assembler    GEN_PO=1 BIP_ASM=1
ahcc\as_plib.c		(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; parse routines for as_parse          BIP_ASM=1
ahcc\as_out.c		(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; assembler (code) output     GEN_PO=1 BIP_ASM=1

; output
ahcc\po.c			(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; Pure C object output        GEN_PO=1
ahcc\as_lib.c		(ahcc\po.h,ahcc\as.h,ahcc\as_defs.h)	; common of po.c & as_out.c	  GEN_PO=1
ahcc\plib.c			(ahcc\po.h,ahcc\as_defs.h)				; common of po.c & ld.c

; linker	(Atari GEMDOS)
ahcc\ld.c			(ahcc\po.h,ahcc\as_defs.h)				; linker for Pure C objects
ahcc\ld_ob.c 		(ahcc\po.h,ahcc\as_defs.h)				; any objects
ahcc\list.c													; Generic list routines

ahcc\diagpr.c
common\qmem.c			; quick permanent malloc's
common\amem.c			; specials
common\ahcm.c			; non fragmenting and thread save memory allocator

pc881lib.lib			; fpu lib

pcstdlib.lib			; standard library
pctoslib.lib			; TOS library
pcgemlib.lib			; (AES and) VDI library

pcextlib.lib			; Pure C specific
